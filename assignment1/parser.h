#include "lex.h"

#ifndef PARSER
#define PARSER

// Parser for the Lambda Calculus language.
class Parser{

public:

    // a function to read a token and apply the language rules
    void parse();

    // getter for bool passed
    bool getPassed(){
        return passed;
    }

private:

    // functions

    // Calls function expr. When expr returns it will check if all tokens
    // have been handled, if not raise error.
    void start();

    // Parses strings in the language generated by the rule:
    // ⟨expr⟩ ::= VAR ⟨expr_⟩ | '(' ⟨expr⟩ ')' ⟨expr_⟩ | '\' VAR ⟨expr⟩ ⟨expr_⟩
    void expr();

    // ⟨expr_⟩ ::=  VAR ⟨expr_⟩ | '(' ⟨expr⟩ ')' ⟨expr_⟩ | '\' VAR ⟨expr⟩ ⟨expr_⟩ | empty string
    void expr_(); 

    // 
    void error();

    // variables
    
    int nextToken;
    bool passed = true; // a variable that keeps track if the parser detected errors
                        // true if no errors, false if errors.

    Lex lex; // lexical analyser used by the parser


};

#endif